version: '3.8'
services:
  client_server:
    build: ./User-Server/
    ports:
      - "3001"
    restart: always
    container_name: client_server
    environment:
      - PORT=3001
      - MONGOURL_USER=mongodb://rootuser:rootuser@mongodb:27017/db?authSource=admin
      - Patient_JWT_LIFETIME=30d
      - Patient_JWT_SECRET_KEY=VaibhavYadav
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=rootuser
      - POSTGRES_PASS=rootuser
      - POSTGRES_PORT=5432
      - POSTGRES_DIALECT=postgres
      - MAX_REQUESTS=10
      - WINDOW_SIZE_IN_SECONDS=10
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_URL=amqp://rootuser:rootuser@rabbitmq:5672/
    networks:
      - app_network
    deploy:
      replicas: 1
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  healthcare_server:
    build: ./Healthcare-Server/
    container_name: healthcare_server
    ports:
      - "3002"
    restart: always
    networks:
      - app_network
    deploy:
      replicas: 1
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
  
  worker:
    build: ./Worker/
    restart: always
    container_name: worker_service
    networks:
      - app_network
    deploy:
      replicas: 1
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  mongodb:
    image: mongo:latest
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: rootuser
      MONGO_INITDB_ROOT_PASSWORD: rootuser
    volumes:
      - mongodb_data:/data/db
    networks:
      - app_network
    healthcheck:
      test: mongosh --eval "db.adminCommand('ping')" --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: rootuser
      POSTGRES_PASSWORD: rootuser
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "rootuser", "-h", "localhost", "-d", "postgres"]
      interval: 10s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:management
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: rootuser
      RABBITMQ_DEFAULT_PASS: rootuser
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  redis:
    image: redis:latest
    restart: always
    container_name: redis-server
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5

  nginx:
    image: nginx
    restart: always
    container_name: nginx
    command: /bin/sh -c "nginx -g 'daemon off;' && nginx -s reload"
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./static_healthcare:/usr/share/nginx/html/healthcare:ro
      - ./static_client:/usr/share/nginx/html/client:ro
    depends_on:
      - healthcare_server
      - client_server
    networks:
      - app_network

volumes:
  mongodb_data:
  postgres_data:
  rabbitmq_data:
  redis-data:

networks:
  app_network:
    driver: bridge






